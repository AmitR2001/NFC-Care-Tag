// Import required modules
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const https = require('https');

// Create an Express application
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware setup
app.use(cors()); // Enable Cross-Origin Resource Sharing
app.use(bodyParser.json()); // Parse JSON bodies
app.use(bodyParser.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(express.static(path.join(__dirname, 'public'))); // Serve static files from the 'public' directory

// Database setup
const db = new sqlite3.Database('./database2.sqlite', (err) => {
    if (err) {
        console.error('Error opening database:', err.message);
    } else {
        console.log('Connected to the SQLite database.');
        db.serialize(() => {
            db.run('PRAGMA journal_mode = WAL;'); // Use Write-Ahead Logging mode
            db.run(`CREATE TABLE IF NOT EXISTS patients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fullName TEXT,
                age INTEGER,
                gender TEXT,
                bloodType TEXT,
                drugAllergies TEXT,
                foodAllergies TEXT,
                environmentalAllergies TEXT,
                diabetes TEXT,
                hypertension TEXT,
                asthma TEXT,
                heartDisease TEXT,
                kidneyDisease TEXT,
                currentMedications TEXT,
                medicationChanges TEXT,
                surgeries TEXT,
                illnesses TEXT,
                emergencyContactName TEXT,
                emergencyContactRelationship TEXT,
                emergencyContactPhone TEXT,
                tetanus TEXT,
                covid19 TEXT,
                otherImmunizations TEXT,
                smoker TEXT,
                alcohol TEXT,
                dietaryRestrictions TEXT,
                physicianName TEXT,
                physicianContact TEXT,
                insuranceProvider TEXT,
                insurancePolicy TEXT,
                PatientID TEXT
            )`, (err) => {
                if (err) {
                    console.error('Error creating table:', err.message);
                } else {
                    console.log('Table created or already exists.');
                }
            });
        });
    }
});

// Route to handle POST requests to add a new patient
app.post('/api/patients', (req, res) => {
    const {
        fullName, age, gender, bloodType, drugAllergies, foodAllergies, environmentalAllergies,
        diabetes, hypertension, asthma, heartDisease, kidneyDisease, currentMedications,
        medicationChanges, surgeries, illnesses, emergencyContactName, emergencyContactRelationship,
        emergencyContactPhone, tetanus, covid19, otherImmunizations, smoker, alcohol,
        dietaryRestrictions, physicianName, physicianContact, insuranceProvider, insurancePolicy
    } = req.body;

    const sql = `INSERT INTO patients (
        fullName, age, gender, bloodType, drugAllergies, foodAllergies, environmentalAllergies,
        diabetes, hypertension, asthma, heartDisease, kidneyDisease, currentMedications,
        medicationChanges, surgeries, illnesses, emergencyContactName, emergencyContactRelationship,
        emergencyContactPhone, tetanus, covid19, otherImmunizations, smoker, alcohol,
        dietaryRestrictions, physicianName, physicianContact, insuranceProvider, insurancePolicy
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

    const params = [
        fullName, age, gender, bloodType, drugAllergies, foodAllergies, environmentalAllergies,
        diabetes, hypertension, asthma, heartDisease, kidneyDisease, currentMedications,
        medicationChanges, surgeries, illnesses, emergencyContactName, emergencyContactRelationship,
        emergencyContactPhone, tetanus, covid19, otherImmunizations, smoker, alcohol,
        dietaryRestrictions, physicianName, physicianContact, insuranceProvider, insurancePolicy
    ];
    
    db.run(sql, params, function(err) {
        if (err) {
            console.error('Error inserting data:', err.message);
            return res.status(400).json({ error: err.message });
        }
        console.log('Data inserted successfully with ID:', this.lastID);
        res.status(201).json({ id: this.lastID });
    });
});

// Route to handle PUT requests to update a patient's PatientID
app.put('/api/patients/:id/patientID', (req, res) => {
    const { patientID } = req.body;
    const sql = `UPDATE patients SET PatientID = ? WHERE id = ?`;
    const params = [patientID, req.params.id];

    db.run(sql, params, function(err) {
        if (err) {
            console.error('Error updating PatientID:', err.message);
            return res.status(400).json({ error: err.message });
        }
        console.log('PatientID updated successfully for ID:', req.params.id);
        res.status(200).json({ message: 'PatientID updated successfully' });
    });
});

// Route to handle GET requests to retrieve a patient by PatientID
app.get('/api/patients/patientID/:patientID', (req, res) => {
    const sql = `SELECT * FROM patients WHERE PatientID = ?`;
    const params = [req.params.patientID];
    db.get(sql, params, (err, row) => {
        if (err) {
            res.status(400).json({ error: err.message });
            return;
        }
        if (!row) {
            res.status(404).json({ error: 'Patient not found' });
            return;
        }
        res.json(row);
    });
});

// Read SSL certificate and key
const options = {
    key: fs.readFileSync('key.pem'),
    cert: fs.readFileSync('cert.pem')
};

// Start HTTPS server
https.createServer(options, app).listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running on https://localhost:${PORT}`);
});